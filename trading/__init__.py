"""
Module de trading pour le Trading Bot Volatility 10
Centralise le moteur de d√©cision, la gestion des risques et l'ex√©cution des ordres

Usage:
    from trading import make_trading_decision, execute_decision, get_trading_status
    from trading import decision_engine, risk_manager, order_executor
    from trading import TradingDecision, RiskMetrics, Order
"""

# Imports des classes principales
from .decision_engine import (
    DecisionEngine,
    TradingDecision,
    DecisionContext,
    DecisionType,
    DecisionConfidence,
    MarketRegime,
    decision_engine,
    make_trading_decision,
    get_decision_stats
)

from .risk_manager import (
    RiskManager,
    RiskMetrics,
    RiskLimits,
    RiskAlert,
    RiskLevel,
    RiskEvent,
    PositionInfo,
    PositionType,
    risk_manager,
    calculate_position_size,
    validate_trade,
    get_risk_summary
)

from .order_executor import (
    OrderExecutor,
    Order,
    OrderStatus,
    OrderType,
    ContractType,
    ExecutionConfig,
    order_executor,
    execute_trading_decision,
    get_execution_summary,
    start_order_execution,
    stop_order_execution
)

import logging
import threading
import time
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import warnings

from config import config
from data import db_manager
from analysis import perform_complete_analysis
from ai_model import get_ai_insights

# Configuration du logger
logger = logging.getLogger(__name__)
warnings.filterwarnings('ignore')

# Version du module
__version__ = "1.0.0"

# Informations sur le module
__author__ = "Trading Bot Team"
__description__ = "Module de trading complet pour le Trading Bot Volatility 10"

# Exports principaux
__all__ = [
    # Classes de d√©cision
    "DecisionEngine",
    "TradingDecision",
    "DecisionContext",
    "DecisionType",
    "DecisionConfidence",
    "MarketRegime",

    # Classes de gestion des risques
    "RiskManager",
    "RiskMetrics",
    "RiskLimits",
    "RiskAlert",
    "RiskLevel",
    "RiskEvent",
    "PositionInfo",
    "PositionType",

    # Classes d'ex√©cution
    "OrderExecutor",
    "Order",
    "OrderStatus",
    "OrderType",
    "ContractType",
    "ExecutionConfig",

    # Instances globales
    "decision_engine",
    "risk_manager",
    "order_executor",

    # Fonctions utilitaires - D√©cision
    "make_trading_decision",
    "get_decision_stats",

    # Fonctions utilitaires - Risque
    "calculate_position_size",
    "validate_trade",
    "get_risk_summary",

    # Fonctions utilitaires - Ex√©cution
    "execute_trading_decision",
    "get_execution_summary",
    "start_order_execution",
    "stop_order_execution",

    # Fonctions du module
    "get_trading_pipeline_status",
    "execute_complete_trading_cycle",
    "start_automated_trading",
    "stop_automated_trading",
    "get_trading_performance",
    "emergency_stop_all_trading",
    "get_portfolio_overview",
    "optimize_trading_parameters",

    # M√©tadonn√©es
    "__version__",
    "__author__",
    "__description__"
]


class TradingMode(Enum):
    """Modes de trading"""
    MANUAL = "manual"  # Trading manuel
    SEMI_AUTO = "semi_auto"  # Semi-automatique avec validation
    FULL_AUTO = "full_auto"  # Enti√®rement automatique
    SIMULATION = "simulation"  # Mode simulation
    STOPPED = "stopped"  # Trading arr√™t√©


class TradingStatus(Enum):
    """Statuts du syst√®me de trading"""
    INITIALIZING = "initializing"
    READY = "ready"
    RUNNING = "running"
    PAUSED = "paused"
    ERROR = "error"
    EMERGENCY_STOP = "emergency_stop"


@dataclass
class TradingPerformance:
    """Performance globale du trading"""
    # M√©triques de base
    total_trades: int = 0
    winning_trades: int = 0
    losing_trades: int = 0
    win_rate: float = 0.0

    # Profits et pertes
    total_pnl: float = 0.0
    realized_pnl: float = 0.0
    unrealized_pnl: float = 0.0
    gross_profit: float = 0.0
    gross_loss: float = 0.0

    # Ratios de performance
    profit_factor: float = 0.0
    sharpe_ratio: float = 0.0
    max_drawdown: float = 0.0
    recovery_factor: float = 0.0

    # Exposition et risque
    current_exposure: float = 0.0
    max_exposure: float = 0.0
    risk_score: float = 0.0

    # Timing
    avg_trade_duration: float = 0.0
    total_trading_time: float = 0.0
    last_update: Optional[datetime] = None

    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)


@dataclass
class TradingState:
    """√âtat actuel du syst√®me de trading"""
    mode: TradingMode = TradingMode.STOPPED
    status: TradingStatus = TradingStatus.INITIALIZING

    # Composants
    decision_engine_active: bool = False
    risk_manager_active: bool = False
    order_executor_active: bool = False

    # Configuration
    auto_trading_enabled: bool = False
    emergency_stop_triggered: bool = False
    last_decision_time: Optional[datetime] = None
    last_trade_time: Optional[datetime] = None

    # M√©triques temps r√©el
    decisions_today: int = 0
    trades_today: int = 0
    pnl_today: float = 0.0

    def to_dict(self) -> Dict[str, Any]:
        return {
            'mode': self.mode.value,
            'status': self.status.value,
            'decision_engine_active': self.decision_engine_active,
            'risk_manager_active': self.risk_manager_active,
            'order_executor_active': self.order_executor_active,
            'auto_trading_enabled': self.auto_trading_enabled,
            'emergency_stop_triggered': self.emergency_stop_triggered,
            'last_decision_time': self.last_decision_time.isoformat() if self.last_decision_time else None,
            'last_trade_time': self.last_trade_time.isoformat() if self.last_trade_time else None,
            'decisions_today': self.decisions_today,
            'trades_today': self.trades_today,
            'pnl_today': self.pnl_today
        }


class TradingOrchestrator:
    """Orchestrateur principal du syst√®me de trading"""

    def __init__(self):
        # √âtat du syst√®me
        self.trading_state = TradingState()
        self.trading_performance = TradingPerformance()

        # Configuration
        self.config = {
            'auto_decision_interval_seconds': 60,  # D√©cision toutes les minutes
            'max_decisions_per_hour': 12,  # Limite de d√©cisions par heure
            'risk_check_interval_seconds': 30,  # V√©rification risque toutes les 30s
            'performance_update_interval': 300,  # Mise √† jour performance toutes les 5min
            'emergency_drawdown_threshold': 0.05,  # 5% de drawdown pour arr√™t d'urgence
            'default_trading_symbols': ['R_10'],  # Symboles par d√©faut
            'enable_ai_insights': True,  # Utiliser les insights IA
            'min_confidence_for_execution': 0.65  # Confiance minimum pour ex√©cuter
        }

        # Threading
        self.auto_trading_thread = None
        self.monitoring_thread = None
        self.trading_lock = threading.Lock()
        self.running = False

        # Historique et cache
        self.decision_history = []
        self.performance_history = []
        self.last_performance_update = None

        logger.info("Orchestrateur de trading initialis√©")

    def initialize_trading_system(self) -> bool:
        """Initialise compl√®tement le syst√®me de trading"""
        try:
            logger.info("üöÄ Initialisation du syst√®me de trading...")

            with self.trading_lock:
                self.trading_state.status = TradingStatus.INITIALIZING

                # V√©rifier les composants
                components_status = {
                    'decision_engine': decision_engine is not None,
                    'risk_manager': risk_manager is not None,
                    'order_executor': order_executor is not None
                }

                if not all(components_status.values()):
                    missing = [k for k, v in components_status.items() if not v]
                    logger.error(f"Composants manquants: {missing}")
                    self.trading_state.status = TradingStatus.ERROR
                    return False

                # Initialiser l'ex√©cuteur d'ordres
                if not order_executor.running:
                    if not order_executor.start():
                        logger.error("√âchec d√©marrage de l'ex√©cuteur d'ordres")
                        self.trading_state.status = TradingStatus.ERROR
                        return False

                # Mettre √† jour l'√©tat des composants
                self.trading_state.decision_engine_active = True
                self.trading_state.risk_manager_active = True
                self.trading_state.order_executor_active = order_executor.running

                # Calcul initial de la performance
                self._update_trading_performance()

                # Marquer comme pr√™t
                self.trading_state.status = TradingStatus.READY
                self.trading_state.mode = TradingMode.MANUAL

                logger.info("‚úÖ Syst√®me de trading initialis√© avec succ√®s")
                return True

        except Exception as e:
            logger.error(f"Erreur initialisation syst√®me de trading: {e}")
            self.trading_state.status = TradingStatus.ERROR
            return False

    def start_automated_trading(self, symbols: List[str] = None,
                                mode: TradingMode = TradingMode.FULL_AUTO) -> bool:
        """
        D√©marre le trading automatis√©

        Args:
            symbols: Liste des symboles √† trader (d√©faut: R_10)
            mode: Mode de trading automatis√©

        Returns:
            True si d√©marrage r√©ussi
        """
        try:
            with self.trading_lock:
                if self.trading_state.status != TradingStatus.READY:
                    if not self.initialize_trading_system():
                        return False

                if self.running:
                    logger.warning("Trading automatis√© d√©j√† en cours")
                    return True

                # Configuration
                self.trading_symbols = symbols or self.config['default_trading_symbols']
                self.trading_state.mode = mode
                self.trading_state.auto_trading_enabled = True
                self.trading_state.status = TradingStatus.RUNNING
                self.running = True

                # D√©marrer les threads
                self.auto_trading_thread = threading.Thread(
                    target=self._auto_trading_worker,
                    daemon=True
                )
                self.auto_trading_thread.start()

                self.monitoring_thread = threading.Thread(
                    target=self._monitoring_worker,
                    daemon=True
                )
                self.monitoring_thread.start()

                logger.info(f"üöÄ Trading automatis√© d√©marr√© ({mode.value}) sur {self.trading_symbols}")
                return True

        except Exception as e:
            logger.error(f"Erreur d√©marrage trading automatis√©: {e}")
            self.trading_state.status = TradingStatus.ERROR
            return False

    def stop_automated_trading(self) -> bool:
        """Arr√™te le trading automatis√©"""
        try:
            with self.trading_lock:
                if not self.running:
                    logger.info("Trading automatis√© d√©j√† arr√™t√©")
                    return True

                logger.info("üõë Arr√™t du trading automatis√©...")

                self.running = False
                self.trading_state.auto_trading_enabled = False
                self.trading_state.status = TradingStatus.PAUSED
                self.trading_state.mode = TradingMode.MANUAL

                # Attendre l'arr√™t des threads
                if self.auto_trading_thread and self.auto_trading_thread.is_alive():
                    self.auto_trading_thread.join(timeout=5)

                if self.monitoring_thread and self.monitoring_thread.is_alive():
                    self.monitoring_thread.join(timeout=5)

                logger.info("‚úÖ Trading automatis√© arr√™t√©")
                return True

        except Exception as e:
            logger.error(f"Erreur arr√™t trading automatis√©: {e}")
            return False

    def execute_complete_trading_cycle(self, symbol: str = "R_10",
                                       timeframe: str = "1m") -> Optional[Dict[str, Any]]:
        """
        Ex√©cute un cycle complet de trading (d√©cision -> validation -> ex√©cution)

        Args:
            symbol: Symbole √† trader
            timeframe: Timeframe d'analyse

        Returns:
            R√©sultats du cycle complet ou None si √©chec
        """
        try:
            cycle_start = time.time()

            logger.debug(f"üîÑ Cycle de trading complet pour {symbol}")

            # √âtape 1: Prise de d√©cision
            decision = decision_engine.make_decision(symbol, timeframe)

            if not decision or decision.decision_type == DecisionType.HOLD:
                return {
                    'success': False,
                    'reason': 'Aucune d√©cision de trading',
                    'decision': decision.to_dict() if decision else None,
                    'cycle_time_ms': (time.time() - cycle_start) * 1000
                }

            # √âtape 2: Validation des risques
            position_type_str = "BUY" if decision.decision_type == DecisionType.BUY else "SELL"
            is_valid, risk_issues = validate_trade(
                symbol, position_type_str, decision.position_size,
                decision.entry_price or 100.0
            )

            if not is_valid:
                return {
                    'success': False,
                    'reason': 'D√©cision rejet√©e par la gestion des risques',
                    'decision': decision.to_dict(),
                    'risk_issues': risk_issues,
                    'cycle_time_ms': (time.time() - cycle_start) * 1000
                }

            # √âtape 3: V√©rification de la confiance
            if decision.confidence.value in ['very_low', 'low']:
                if decision.overall_score < self.config['min_confidence_for_execution']:
                    return {
                        'success': False,
                        'reason': 'Confiance insuffisante pour l\'ex√©cution',
                        'decision': decision.to_dict(),
                        'confidence': decision.confidence.value,
                        'score': decision.overall_score,
                        'cycle_time_ms': (time.time() - cycle_start) * 1000
                    }

            # √âtape 4: Ex√©cution
            order_id = execute_trading_decision(decision)

            if not order_id:
                return {
                    'success': False,
                    'reason': '√âchec de l\'ex√©cution de l\'ordre',
                    'decision': decision.to_dict(),
                    'cycle_time_ms': (time.time() - cycle_start) * 1000
                }

            # √âtape 5: Mise √† jour des statistiques
            self._update_daily_stats(decision, order_id)

            cycle_time = (time.time() - cycle_start) * 1000

            result = {
                'success': True,
                'decision': decision.to_dict(),
                'order_id': order_id,
                'risk_validation': 'passed',
                'execution_status': 'submitted',
                'cycle_time_ms': cycle_time
            }

            logger.info(f"‚úÖ Cycle complet ex√©cut√©: {decision.decision_type.value} "
                        f"({cycle_time:.1f}ms)")

            return result

        except Exception as e:
            logger.error(f"Erreur cycle de trading: {e}")
            return {
                'success': False,
                'reason': f'Erreur technique: {str(e)}',
                'cycle_time_ms': (time.time() - cycle_start) * 1000
            }

    def _auto_trading_worker(self):
        """Worker pour le trading automatis√©"""
        logger.info("ü§ñ Worker de trading automatis√© d√©marr√©")

        while self.running:
            try:
                if not self.trading_state.auto_trading_enabled:
                    time.sleep(1)
                    continue

                # V√©rifier les conditions de trading
                if not self._can_trade():
                    time.sleep(5)
                    continue

                # Ex√©cuter un cycle pour chaque symbole
                for symbol in self.trading_symbols:
                    if not self.running:
                        break

                    try:
                        result = self.execute_complete_trading_cycle(symbol)

                        if result and result.get('success'):
                            logger.info(f"üéØ Trading automatis√© r√©ussi pour {symbol}")
                        else:
                            reason = result.get('reason', 'Raison inconnue') if result else 'R√©sultat null'
                            logger.debug(f"‚è≠Ô∏è Pas de trade pour {symbol}: {reason}")

                    except Exception as e:
                        logger.error(f"Erreur trading automatis√© pour {symbol}: {e}")

                # Attendre avant le prochain cycle
                time.sleep(self.config['auto_decision_interval_seconds'])

            except Exception as e:
                logger.error(f"Erreur worker trading automatis√©: {e}")
                time.sleep(10)

        logger.info("üõë Worker de trading automatis√© arr√™t√©")

    def _monitoring_worker(self):
        """Worker de monitoring et maintenance"""
        logger.info("üëÅÔ∏è Worker de monitoring d√©marr√©")

        while self.running:
            try:
                # V√©rification des risques
                self._check_emergency_conditions()

                # Mise √† jour de la performance
                if (not self.last_performance_update or
                        (datetime.now(timezone.utc) - self.last_performance_update).total_seconds() >
                        self.config['performance_update_interval']):
                    self._update_trading_performance()

                # Nettoyage de l'historique
                self._cleanup_history()

                # Logger les statistiques p√©riodiquement
                if time.time() % 300 < 30:  # Toutes les 5 minutes
                    self._log_trading_stats()

                time.sleep(self.config['risk_check_interval_seconds'])

            except Exception as e:
                logger.error(f"Erreur worker monitoring: {e}")
                time.sleep(30)

        logger.info("üõë Worker de monitoring arr√™t√©")

    def _can_trade(self) -> bool:
        """V√©rifie si les conditions permettent de trader"""
        try:
            # V√©rifier l'arr√™t d'urgence
            if self.trading_state.emergency_stop_triggered:
                return False

            # V√©rifier les composants
            if not all([
                self.trading_state.decision_engine_active,
                self.trading_state.risk_manager_active,
                self.trading_state.order_executor_active
            ]):
                return False

            # V√©rifier les limites de d√©cisions
            if self.trading_state.decisions_today >= self.config['max_decisions_per_hour']:
                return False

            # V√©rifier le drawdown
            risk_summary = get_risk_summary()
            current_drawdown = risk_summary.get('risk_metrics', {}).get('current_drawdown', 0)

            if current_drawdown > self.config['emergency_drawdown_threshold']:
                logger.warning(f"Drawdown trop √©lev√©: {current_drawdown:.1%}")
                return False

            return True

        except Exception as e:
            logger.error(f"Erreur v√©rification conditions de trading: {e}")
            return False

    def _check_emergency_conditions(self):
        """V√©rifie les conditions d'arr√™t d'urgence"""
        try:
            # V√©rifier le gestionnaire de risques
            risk_summary = get_risk_summary()

            if risk_summary.get('emergency_stop', False):
                self.emergency_stop_all_trading()
                return

            # V√©rifier les alertes critiques
            active_alerts = risk_summary.get('active_alerts', [])
            critical_alerts = [
                alert for alert in active_alerts
                if alert.get('severity') == 'critical'
            ]

            if critical_alerts:
                logger.critical(f"üö® {len(critical_alerts)} alerte(s) critique(s) d√©tect√©e(s)")
                for alert in critical_alerts:
                    logger.critical(f"   - {alert.get('message', 'Alerte inconnue')}")

                if len(critical_alerts) >= 3:  # Plus de 3 alertes critiques
                    self.emergency_stop_all_trading()

        except Exception as e:
            logger.error(f"Erreur v√©rification conditions d'urgence: {e}")

    def _update_trading_performance(self):
        """Met √† jour les m√©triques de performance"""
        try:
            # R√©cup√©rer les donn√©es du gestionnaire de risques
            risk_summary = get_risk_summary()
            risk_metrics = risk_summary.get('risk_metrics', {})

            # R√©cup√©rer les statistiques d'ex√©cution
            execution_summary = get_execution_summary()
            execution_stats = execution_summary.get('execution_stats', {})

            # Mettre √† jour la performance
            self.trading_performance.total_pnl = risk_metrics.get('total_pnl', 0.0)
            self.trading_performance.max_drawdown = risk_metrics.get('max_drawdown', 0.0)
            self.trading_performance.current_exposure = risk_metrics.get('total_exposure', 0.0)
            self.trading_performance.risk_score = risk_metrics.get('risk_score', 0.0)

            # M√©triques d'ex√©cution
            if execution_stats.get('orders_sent', 0) > 0:
                self.trading_performance.total_trades = execution_stats['orders_sent']
                self.trading_performance.total_pnl = execution_stats.get('total_pnl', 0.0)

            # Calculer les ratios
            if self.trading_performance.total_trades > 0:
                filled_orders = execution_stats.get('orders_filled', 0)
                self.trading_performance.win_rate = filled_orders / self.trading_performance.total_trades

            self.trading_performance.last_update = datetime.now(timezone.utc)
            self.last_performance_update = self.trading_performance.last_update

            # Ajouter √† l'historique
            self.performance_history.append({
                'timestamp': self.trading_performance.last_update,
                'performance': self.trading_performance.to_dict()
            })

        except Exception as e:
            logger.error(f"Erreur mise √† jour performance: {e}")

    def _update_daily_stats(self, decision: TradingDecision, order_id: str):
        """Met √† jour les statistiques journali√®res"""
        try:
            self.trading_state.decisions_today += 1
            self.trading_state.last_decision_time = decision.timestamp

            if order_id:
                self.trading_state.trades_today += 1
                self.trading_state.last_trade_time = datetime.now(timezone.utc)

            # Ajouter √† l'historique
            self.decision_history.append({
                'timestamp': decision.timestamp,
                'decision': decision.to_dict(),
                'order_id': order_id
            })

        except Exception as e:
            logger.error(f"Erreur mise √† jour stats journali√®res: {e}")

    def _cleanup_history(self):
        """Nettoie l'historique ancien"""
        try:
            # Limiter la taille des historiques
            max_history_size = 1000

            if len(self.decision_history) > max_history_size:
                self.decision_history = self.decision_history[-max_history_size // 2:]

            if len(self.performance_history) > max_history_size:
                self.performance_history = self.performance_history[-max_history_size // 2:]

        except Exception as e:
            logger.error(f"Erreur nettoyage historique: {e}")

    def _log_trading_stats(self):
        """Log les statistiques de trading"""
        try:
            logger.info(f"üìä Stats Trading - "
                        f"D√©cisions: {self.trading_state.decisions_today}, "
                        f"Trades: {self.trading_state.trades_today}, "
                        f"PnL: {self.trading_performance.total_pnl:.2f}, "
                        f"Exposition: {self.trading_performance.current_exposure:.2f}")

        except Exception as e:
            logger.error(f"Erreur log des stats: {e}")

    def emergency_stop_all_trading(self) -> bool:
        """Arr√™t d'urgence complet du trading"""
        try:
            logger.critical("üö® ARR√äT D'URGENCE DU TRADING ACTIV√â")

            with self.trading_lock:
                # Marquer l'arr√™t d'urgence
                self.trading_state.emergency_stop_triggered = True
                self.trading_state.status = TradingStatus.EMERGENCY_STOP
                self.trading_state.auto_trading_enabled = False

                # Arr√™ter le trading automatis√©
                self.running = False

                # Activer l'arr√™t d'urgence dans le gestionnaire de risques
                risk_manager.emergency_stop_triggered = True
                risk_manager.trading_enabled = False

                logger.critical("üõë Tous les syst√®mes de trading arr√™t√©s")
                return True

        except Exception as e:
            logger.error(f"Erreur arr√™t d'urgence: {e}")
            return False

    def reset_emergency_stop(self) -> bool:
        """Remet √† z√©ro l'arr√™t d'urgence (utilisation manuelle)"""
        try:
            with self.trading_lock:
                if not self.trading_state.emergency_stop_triggered:
                    return True

                logger.warning("‚ö†Ô∏è Remise √† z√©ro de l'arr√™t d'urgence...")

                # Reset des √©tats
                self.trading_state.emergency_stop_triggered = False
                self.trading_state.status = TradingStatus.READY

                # Reset du gestionnaire de risques
                risk_manager.reset_emergency_stop()

                logger.info("‚úÖ Arr√™t d'urgence remis √† z√©ro")
                return True

        except Exception as e:
            logger.error(f"Erreur reset arr√™t d'urgence: {e}")
            return False

    def get_trading_pipeline_status(self) -> Dict[str, Any]:
        """Retourne le statut complet du pipeline de trading"""
        try:
            # Statuts des composants
            decision_stats = get_decision_stats()
            risk_summary = get_risk_summary()
            execution_summary = get_execution_summary()

            status = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'trading_state': self.trading_state.to_dict(),
                'trading_performance': self.trading_performance.to_dict(),
                'components': {
                    'decision_engine': {
                        'active': self.trading_state.decision_engine_active,
                        'stats': decision_stats
                    },
                    'risk_manager': {
                        'active': self.trading_state.risk_manager_active,
                        'summary': risk_summary
                    },
                    'order_executor': {
                        'active': self.trading_state.order_executor_active,
                        'summary': execution_summary
                    }
                },
                'recent_activity': {
                    'decisions_count': len(self.decision_history),
                    'last_decision': self.decision_history[-1] if self.decision_history else None,
                    'performance_updates': len(self.performance_history)
                }
            }

            # Sant√© globale
            if self.trading_state.status == TradingStatus.EMERGENCY_STOP:
                status['overall_health'] = 'critical'
            elif self.trading_state.status in [TradingStatus.ERROR, TradingStatus.PAUSED]:
                status['overall_health'] = 'warning'
            elif self.trading_state.status == TradingStatus.RUNNING:
                status['overall_health'] = 'excellent'
            else:
                status['overall_health'] = 'good'

            return status

        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration statut pipeline: {e}")
            return {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'error': str(e),
                'overall_health': 'error'
            }

    def get_portfolio_overview(self) -> Dict[str, Any]:
        """Retourne un aper√ßu complet du portfolio"""
        try:
            risk_summary = get_risk_summary()
            execution_summary = get_execution_summary()

            overview = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'account_info': {
                    'balance': risk_summary.get('risk_metrics', {}).get('account_balance', 0),
                    'equity': risk_summary.get('risk_metrics', {}).get('total_equity', 0),
                    'free_margin': risk_summary.get('risk_metrics', {}).get('free_margin', 0),
                    'margin_level': risk_summary.get('risk_metrics', {}).get('margin_level', 0)
                },
                'positions': {
                    'count': risk_summary.get('risk_metrics', {}).get('open_positions', 0),
                    'total_exposure': risk_summary.get('risk_metrics', {}).get('total_exposure', 0),
                    'unrealized_pnl': risk_summary.get('positions_summary', {}).get('unrealized_pnl', 0),
                    'symbols': risk_summary.get('positions_summary', {}).get('symbols', [])
                },
                'performance': {
                    'total_pnl': self.trading_performance.total_pnl,
                    'win_rate': self.trading_performance.win_rate,
                    'max_drawdown': self.trading_performance.max_drawdown,
                    'profit_factor': self.trading_performance.profit_factor,
                    'total_trades': self.trading_performance.total_trades
                },
                'today': {
                    'decisions': self.trading_state.decisions_today,
                    'trades': self.trading_state.trades_today,
                    'pnl': self.trading_state.pnl_today
                },
                'risk': {
                    'score': self.trading_performance.risk_score,
                    'current_drawdown': risk_summary.get('risk_metrics', {}).get('current_drawdown', 0),
                    'active_alerts': len(risk_summary.get('active_alerts', [])),
                    'emergency_stop': self.trading_state.emergency_stop_triggered
                },
                'execution': {
                    'orders_filled': execution_summary.get('execution_stats', {}).get('orders_filled', 0),
                    'orders_rejected': execution_summary.get('execution_stats', {}).get('orders_rejected', 0),
                    'avg_execution_time': execution_summary.get('execution_stats', {}).get('avg_execution_time_ms', 0),
                    'paper_trading': execution_summary.get('paper_trading', True)
                }
            }

            return overview

        except Exception as e:
            logger.error(f"Erreur g√©n√©ration aper√ßu portfolio: {e}")
            return {'error': str(e)}

    def optimize_trading_parameters(self, optimization_period_days: int = 30) -> Dict[str, Any]:
        """
        Optimise les param√®tres de trading bas√©s sur la performance historique

        Args:
            optimization_period_days: P√©riode d'analyse en jours

        Returns:
            Param√®tres optimis√©s et recommandations
        """
        try:
            logger.info(f"üîß Optimisation des param√®tres de trading sur {optimization_period_days} jours")

            optimization = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'analysis_period_days': optimization_period_days,
                'current_parameters': {},
                'optimized_parameters': {},
                'recommendations': [],
                'performance_impact': {}
            }

            # Analyser la performance actuelle
            current_performance = self.trading_performance.to_dict()

            # Param√®tres actuels
            optimization['current_parameters'] = {
                'max_position_size': risk_manager.risk_limits.max_position_size_pct,
                'max_drawdown': risk_manager.risk_limits.max_drawdown_pct,
                'decision_interval': self.config['auto_decision_interval_seconds'],
                'min_confidence': self.config['min_confidence_for_execution'],
                'max_decisions_per_hour': self.config['max_decisions_per_hour']
            }

            # Analyser les patterns de performance
            recommendations = []

            # Optimisation bas√©e sur le win rate
            if self.trading_performance.win_rate < 0.5:
                recommendations.append({
                    'parameter': 'min_confidence_for_execution',
                    'current_value': self.config['min_confidence_for_execution'],
                    'suggested_value': min(0.8, self.config['min_confidence_for_execution'] + 0.1),
                    'reason': 'Win rate faible - augmenter le seuil de confiance'
                })

            # Optimisation bas√©e sur le drawdown
            if self.trading_performance.max_drawdown > 0.05:  # Plus de 5%
                recommendations.append({
                    'parameter': 'max_position_size_pct',
                    'current_value': risk_manager.risk_limits.max_position_size_pct,
                    'suggested_value': max(0.01, risk_manager.risk_limits.max_position_size_pct * 0.8),
                    'reason': 'Drawdown √©lev√© - r√©duire la taille des positions'
                })

            # Optimisation bas√©e sur le nombre de trades
            if self.trading_state.decisions_today < 5:  # Peu de trades
                recommendations.append({
                    'parameter': 'auto_decision_interval_seconds',
                    'current_value': self.config['auto_decision_interval_seconds'],
                    'suggested_value': max(30, self.config['auto_decision_interval_seconds'] - 15),
                    'reason': 'Peu d\'activit√© - r√©duire l\'intervalle de d√©cision'
                })

            # Optimisation bas√©e sur les erreurs
            execution_summary = get_execution_summary()
            rejection_rate = execution_summary.get('execution_stats', {}).get('orders_rejected', 0)

            if rejection_rate > 0.2:  # Plus de 20% de rejets
                recommendations.append({
                    'parameter': 'risk_check_enhancement',
                    'current_value': 'standard',
                    'suggested_value': 'enhanced',
                    'reason': 'Taux de rejet √©lev√© - am√©liorer la validation des risques'
                })

            optimization['recommendations'] = recommendations

            # Estimation de l'impact
            if recommendations:
                optimization['performance_impact'] = {
                    'estimated_win_rate_improvement': 0.05,
                    'estimated_drawdown_reduction': 0.02,
                    'estimated_sharpe_improvement': 0.1
                }

            logger.info(f"‚úÖ Optimisation termin√©e: {len(recommendations)} recommandation(s)")
            return optimization

        except Exception as e:
            logger.error(f"Erreur optimisation param√®tres: {e}")
            return {
                'error': str(e),
                'timestamp': datetime.now(timezone.utc).isoformat()
            }


# Instance globale de l'orchestrateur
trading_orchestrator = TradingOrchestrator()


# Fonctions principales du module
def get_trading_pipeline_status() -> Dict[str, Any]:
    """Retourne le statut complet du pipeline de trading"""
    return trading_orchestrator.get_trading_pipeline_status()


def execute_complete_trading_cycle(symbol: str = "R_10", timeframe: str = "1m") -> Optional[Dict[str, Any]]:
    """Ex√©cute un cycle complet de trading"""
    return trading_orchestrator.execute_complete_trading_cycle(symbol, timeframe)


def start_automated_trading(symbols: List[str] = None, mode: str = "full_auto") -> bool:
    """D√©marre le trading automatis√©"""
    trading_mode = TradingMode.FULL_AUTO if mode == "full_auto" else TradingMode.SEMI_AUTO
    return trading_orchestrator.start_automated_trading(symbols, trading_mode)


def stop_automated_trading() -> bool:
    """Arr√™te le trading automatis√©"""
    return trading_orchestrator.stop_automated_trading()


def get_trading_performance() -> TradingPerformance:
    """Retourne les m√©triques de performance"""
    return trading_orchestrator.trading_performance


def emergency_stop_all_trading() -> bool:
    """Arr√™t d'urgence complet"""
    return trading_orchestrator.emergency_stop_all_trading()


def get_portfolio_overview() -> Dict[str, Any]:
    """Retourne un aper√ßu du portfolio"""
    return trading_orchestrator.get_portfolio_overview()


def optimize_trading_parameters(days: int = 30) -> Dict[str, Any]:
    """Optimise les param√®tres de trading"""
    return trading_orchestrator.optimize_trading_parameters(days)


def initialize_trading_system() -> bool:
    """Initialise le syst√®me de trading"""
    return trading_orchestrator.initialize_trading_system()


def print_trading_banner():
    """Affiche la banni√®re du module de trading"""
    print("=" * 80)
    print("üíº TRADING BOT VOLATILITY 10 - MODULE DE TRADING")
    print("=" * 80)
    print(f"üì¶ Version: {__version__}")
    print(f"üë• Auteur: {__author__}")
    print(f"üìù Description: {__description__}")

    # Statut du pipeline
    status = get_trading_pipeline_status()
    health_emoji = {
        "excellent": "‚úÖ",
        "good": "üü¢",
        "warning": "‚ö†Ô∏è",
        "critical": "‚ùå",
        "error": "üí•"
    }

    overall_health = status.get('overall_health', 'unknown')
    print(f"\nüè• Sant√© du pipeline: {health_emoji.get(overall_health, '‚ùì')} {overall_health.upper()}")

    # √âtat du trading
    trading_state = status.get('trading_state', {})
    print(f"ü§ñ Mode: {trading_state.get('mode', 'unknown').upper()}")
    print(f"üîÑ Statut: {trading_state.get('status', 'unknown').upper()}")
    print(f"‚ö° Auto-trading: {'ON' if trading_state.get('auto_trading_enabled') else 'OFF'}")

    # Composants
    components = status.get('components', {})
    for component, info in components.items():
        active = info.get('active', False)
        print(f"   {'‚úÖ' if active else '‚ùå'} {component.replace('_', ' ').title()}")

    # Performance aujourd'hui
    print(f"\nüìä Aujourd'hui:")
    print(f"   D√©cisions: {trading_state.get('decisions_today', 0)}")
    print(f"   Trades: {trading_state.get('trades_today', 0)}")
    print(f"   P&L: {trading_state.get('pnl_today', 0):.2f}")

    # Arr√™t d'urgence
    if trading_state.get('emergency_stop_triggered'):
        print(f"\nüö® ARR√äT D'URGENCE ACTIV√â")

    print("=" * 80)


# Initialisation automatique au chargement du module
try:
    logger.info(f"Module de trading charg√© (version {__version__})")

    # V√©rifier que tous les sous-modules sont charg√©s
    components_loaded = [
        decision_engine is not None,
        risk_manager is not None,
        order_executor is not None
    ]

    if all(components_loaded):
        logger.info("‚úÖ Tous les modules de trading sont op√©rationnels")

        # Initialisation silencieuse du syst√®me
        try:
            trading_orchestrator.initialize_trading_system()
        except Exception as e:
            logger.warning(f"Initialisation partielle du syst√®me de trading: {e}")
    else:
        logger.warning("‚ö†Ô∏è Certains modules de trading ne sont pas charg√©s")

except Exception as e:
    logger.error(f"‚ö†Ô∏è Erreur lors de l'initialisation du module de trading: {e}")
    # Ne pas faire planter l'import, permettre l'utilisation partielle